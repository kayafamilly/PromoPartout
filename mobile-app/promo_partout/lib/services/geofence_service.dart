import 'dart:async';
import 'dart:developer' as developer;
import 'package:geolocator/geolocator.dart';

import 'package:flutter_background_service/flutter_background_service.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config.dart';

// Fonction callback pour le service en arri√®re-plan
@pragma('vm:entry-point')
Future<bool> onStart(ServiceInstance service) async {
  developer.log("üöÄ Service de g√©ofencing d√©marr√©");

  // D√©marrer imm√©diatement le service en foreground pour Android 14+
  if (service is AndroidServiceInstance) {
    await service.setAsForegroundService();
  }

  // Cr√©er un timer pour v√©rifier p√©riodiquement (30 secondes pour les tests)
  Timer.periodic(const Duration(seconds: 30), (timer) async {
    try {
      developer.log("üîÑ V√©rification p√©riodique des promotions √† proximit√©");

      // V√©rifier les permissions de localisation
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied || permission == LocationPermission.deniedForever) {
        developer.log("‚ùå Permissions de localisation refus√©es");
        return;
      }

      // Obtenir la position actuelle
      Position position = await Geolocator.getCurrentPosition(
        locationSettings: const LocationSettings(
          accuracy: LocationAccuracy.high,
          timeLimit: Duration(seconds: 10),
        ),
      );

      developer.log("üìç Position obtenue: ${position.latitude}, ${position.longitude}");

      // R√©cup√©rer les promotions depuis le serveur
      await _checkPromotionsFromServer(position);

    } catch (e) {
      developer.log("‚ùå Erreur dans la v√©rification p√©riodique: $e");
    }
  });

  // √âcouter les commandes d'arr√™t
  service.on('stopService').listen((event) {
    developer.log("üõë Arr√™t du service de g√©ofencing");
    service.stopSelf();
  });

  return true;
}

// Fonction pour v√©rifier les promotions depuis le serveur
Future<void> _checkPromotionsFromServer(Position position) async {
  try {
    developer.log("üåê R√©cup√©ration des promotions depuis le serveur...");

    final response = await http.get(
      Uri.parse('${AppConfig.serverUrl}/api/mobile/promotions'),
      headers: {'Content-Type': 'application/json'},
    ).timeout(const Duration(seconds: 10));

    if (response.statusCode == 200) {
      List<dynamic> data = json.decode(response.body);
      developer.log("üìä ${data.length} promotions r√©cup√©r√©es du serveur");

      for (var promo in data) {
        double distance = Geolocator.distanceBetween(
          position.latitude,
          position.longitude,
          promo['latitude'],
          promo['longitude'],
        );

        developer.log("üìè Distance √† '${promo['title']}': ${distance.toStringAsFixed(0)}m");

        if (distance <= AppConfig.proximityRadius) {
          developer.log("üéØ Promotion '${promo['title']}' √† proximit√©!");

          // V√©rifier si cette promotion a d√©j√† √©t√© notifi√©e r√©cemment
          bool alreadyNotified = await _isPromotionRecentlyNotified(promo['id']);
          if (!alreadyNotified) {
            await _sendProximityNotification(promo);
            await _markPromotionAsNotified(promo['id']);
          } else {
            developer.log("‚ÑπÔ∏è Promotion '${promo['title']}' d√©j√† notifi√©e r√©cemment");
          }
        }
      }
    } else {
      developer.log("‚ùå Erreur serveur: ${response.statusCode}");
    }
  } catch (e) {
    developer.log("‚ùå Erreur lors de la v√©rification des promotions: $e");
  }
}

// V√©rifier si une promotion a √©t√© notifi√©e r√©cemment
Future<bool> _isPromotionRecentlyNotified(int promotionId) async {
  try {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? lastNotifiedStr = prefs.getString('last_notified_$promotionId');

    if (lastNotifiedStr == null) return false;

    DateTime lastNotified = DateTime.parse(lastNotifiedStr);
    Duration difference = DateTime.now().difference(lastNotified);

    // Consid√©rer comme r√©cent si notifi√© dans les 30 derni√®res minutes
    return difference.inMinutes < 30;
  } catch (e) {
    developer.log("‚ùå Erreur lors de la v√©rification de notification: $e");
    return false;
  }
}

// Marquer une promotion comme notifi√©e
Future<void> _markPromotionAsNotified(int promotionId) async {
  try {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('last_notified_$promotionId', DateTime.now().toIso8601String());
    developer.log("‚úÖ Promotion $promotionId marqu√©e comme notifi√©e");
  } catch (e) {
    developer.log("‚ùå Erreur lors du marquage de notification: $e");
  }
}

// Envoyer une notification de proximit√©
Future<void> _sendProximityNotification(Map<String, dynamic> promotion) async {
  try {
    developer.log("üì± Envoi de notification pour '${promotion['title']}'");

    // Initialiser le plugin de notifications locales
    FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

    // Configuration Android
    const AndroidInitializationSettings initializationSettingsAndroid = AndroidInitializationSettings('@mipmap/ic_launcher');

    // Configuration g√©n√©rale
    const InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
    );

    await flutterLocalNotificationsPlugin.initialize(initializationSettings);

    // Cr√©er la notification
    const AndroidNotificationDetails androidPlatformChannelSpecifics = AndroidNotificationDetails(
      'proximity_channel',
      'Promotions √† proximit√©',
      channelDescription: 'Notifications pour les promotions √† proximit√©',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: false,
    );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
    );

    await flutterLocalNotificationsPlugin.show(
      promotion['id'],
      'üéØ Promotion √† proximit√©!',
      '${promotion['title']} - ${promotion['description']}',
      platformChannelSpecifics,
    );

    // Utilisation des notifications locales uniquement

    developer.log("‚úÖ Notification envoy√©e avec succ√®s pour '${promotion['title']}'");
  } catch (e) {
    developer.log("‚ùå Erreur lors de l'envoi de la notification: $e");
  }
}

class PromoGeofenceService {
  static final PromoGeofenceService _instance = PromoGeofenceService._internal();
  factory PromoGeofenceService() => _instance;
  PromoGeofenceService._internal();

  bool _isInitialized = false;

  // Cr√©er le canal de notification pour Android 14+
  Future<void> _createNotificationChannel() async {
    try {
      final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();
      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
          flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();

      if (androidImplementation != null) {
        const AndroidNotificationChannel channel = AndroidNotificationChannel(
          'promo_background_service',
          'Service PromoPartout',
          description: 'Service de surveillance des promotions en arri√®re-plan',
          importance: Importance.low,
          playSound: false,
          enableVibration: false,
          showBadge: false,
        );
        await androidImplementation.createNotificationChannel(channel);
        developer.log('‚úÖ Canal de notification cr√©√© pour le service');
      }
    } catch (e) {
      developer.log("‚ö†Ô∏è Erreur lors de la cr√©ation du canal de notification: $e");
    }
  }

  // Initialiser le service de g√©ofencing
  Future<void> initialize() async {
    if (_isInitialized) {
      developer.log("üîÑ Service de g√©ofencing d√©j√† initialis√©");
      return;
    }

    try {
      developer.log("üöÄ Initialisation du service de g√©ofencing...");

      // Cr√©er d'abord le canal de notification pour Android 14+
      await _createNotificationChannel();

      final service = FlutterBackgroundService();

      // Configuration sp√©ciale pour Android 14+
      await service.configure(
        androidConfiguration: AndroidConfiguration(
          onStart: onStart,
          autoStart: false, // Chang√© √† false pour √©viter les probl√®mes de d√©marrage
          isForegroundMode: true,
          notificationChannelId: 'promo_background_service',
          initialNotificationTitle: 'PromoPartout',
          initialNotificationContent: 'Surveillance des promotions actives',
          foregroundServiceNotificationId: 999,
          foregroundServiceTypes: [AndroidForegroundType.location],
        ),
        iosConfiguration: IosConfiguration(
          autoStart: true,
          onForeground: onStart,
          onBackground: onStart,
        ),
      );

      // Essayer de d√©marrer le service, mais ne pas bloquer si √ßa √©choue
      try {
        bool isServiceRunning = await service.isRunning();
        if (!isServiceRunning) {
          await service.startService();
          developer.log("üöÄ Service d√©marr√© manuellement");
        } else {
          developer.log("‚ÑπÔ∏è Service d√©j√† en cours d'ex√©cution");
        }
      } catch (serviceError) {
        developer.log("‚ö†Ô∏è Impossible de d√©marrer le service en arri√®re-plan: $serviceError");
        developer.log("üì± L'application fonctionnera en mode premier plan uniquement");
      }

      _isInitialized = true;
      developer.log("‚úÖ Service de g√©ofencing initialis√© (mode d√©grad√© si n√©cessaire)");
    } catch (e) {
      developer.log("‚ùå Erreur lors de l'initialisation du g√©ofencing: $e");
      developer.log("üì± L'application continuera sans le service en arri√®re-plan");
      _isInitialized = true; // Marquer comme initialis√© m√™me en cas d'erreur
    }
  }

  // Recharger les g√©ofences (appel√© quand de nouvelles promotions sont ajout√©es)
  Future<void> reloadGeofences() async {
    try {
      developer.log("üîÑ Rechargement des g√©ofences...");
      // Avec le service en arri√®re-plan, pas besoin de recharger manuellement
      // La t√¢che p√©riodique va automatiquement v√©rifier les nouvelles promotions
      developer.log("‚úÖ G√©ofences recharg√©es (service g√®re automatiquement)");
    } catch (e) {
      developer.log("‚ùå Erreur lors du rechargement des g√©ofences: $e");
    }
  }

  // Arr√™ter le service
  Future<void> stop() async {
    try {
      developer.log("üõë Arr√™t du service de g√©ofencing...");

      // Arr√™ter le service en arri√®re-plan
      final service = FlutterBackgroundService();
      service.invoke('stopService');

      _isInitialized = false;

      developer.log("‚úÖ Service de g√©ofencing arr√™t√©");
    } catch (e) {
      developer.log("‚ùå Erreur lors de l'arr√™t du service: $e");
    }
  }

  // V√©rifier si le service est en cours d'ex√©cution
  bool get isRunning => _isInitialized;

  // Obtenir le nombre de g√©ofences actives (toujours 0 avec cette approche)
  int get activeGeofencesCount => 0;
}
